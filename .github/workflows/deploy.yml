name: Deploy to S3

on:
  push:
    branches:
      - main
  workflow_dispatch:  # 수동 실행 가능

env:
  NODE_VERSION: '18'
  S3_BUCKET: serenade-prod-website
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          echo "🚀 Deploying to S3 bucket: ${{ env.S3_BUCKET }}"
          
          # S3 버킷 존재 확인
          if ! aws s3 ls "s3://${{ env.S3_BUCKET }}" > /dev/null 2>&1; then
            echo "❌ Cannot access S3 bucket. Please check bucket name and permissions."
            exit 1
          fi
          
          # 이전 파일 백업
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "📦 Creating backup..."
          aws s3 sync "s3://${{ env.S3_BUCKET }}" "s3://${{ env.S3_BUCKET }}-backup-$TIMESTAMP" --quiet || echo "⚠️ Backup failed or no existing files"
          
          # 파일 업로드
          echo "📤 Uploading files..."
          aws s3 sync out/ "s3://${{ env.S3_BUCKET }}" \
            --delete \
            --exclude "*.DS_Store" \
            --cache-control "public, max-age=31536000, immutable" \
            --metadata-directive REPLACE
          
          # HTML 파일 캐시 설정
          echo "🔧 Setting HTML cache headers..."
          aws s3 cp "s3://${{ env.S3_BUCKET }}" "s3://${{ env.S3_BUCKET }}" \
            --recursive \
            --exclude "*" \
            --include "*.html" \
            --cache-control "public, max-age=300" \
            --metadata-directive REPLACE
          
          echo "✅ Deployment completed successfully!"

      - name: Invalidate CloudFront (Optional)
        if: vars.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          echo "🔄 Invalidating CloudFront cache..."
          aws cloudfront create-invalidation \
            --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
          echo "✅ CloudFront invalidation initiated"

      - name: Deployment Summary
        run: |
          echo "🎉 Deployment Summary"
          echo "- S3 Bucket: ${{ env.S3_BUCKET }}"
          echo "- Region: ${{ env.AWS_REGION }}"
          echo "- Website URL: https://${{ env.S3_BUCKET }}.s3.${{ env.AWS_REGION }}.amazonaws.com/index.html"
          echo "- Commit: ${{ github.sha }}"
          echo "- Branch: ${{ github.ref_name }}"